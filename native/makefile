#include asn1/Makefile.am.libanscodec

.PHONY: all clean install

# Define a variable for classpath
CLASS_PATH = ../java/target/classes/

OUTPUT_DIR=target
INSTALL_DIR=../java/target
SOURCE_DIR=src/main/c
ASN1_DIR=src/main/c/asn1
LIB_NAME=per-xer-codec

NATIVE_FILENAME=gov_dot_its_jpo_sdcsdw_asn1_perxercodec_Native

# Debug flags:
# -g3=compile with extra debugg infos. 
# -ggdbg3=include things like macro defenitions. 
# -O0=turn off optimizations.
# -Wall = With all warnings.
DEBUGFLAGS = -g3 -ggdb3 -O0 -Wall

# To deal with the fact that some OS's/Distro's don't define the JAVA_HOME variable, 
# figure out what os we are on, then use the appropriate method to find what it should be
# Then, use that to determine the two directories containing JNI headers 
JNI_INCLUDE=

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	LIB_EXT=so
	JAVA_HOME ?= /usr/lib/jvm/default-java
	JNI_INCLUDE+=-I"$(JAVA_HOME)/include"
	JNI_INCLUDE+=-I"$(JAVA_HOME)/include/linux"
endif
ifeq ($(UNAME_S),Darwin)
	LIB_EXT=dylib
	JAVA_HOME ?= $(shell /usr/libexec/java_home)
	JNI_INCLUDE+=-I"$(JAVA_HOME)/include"
	JNI_INCLUDE+=-I"$(JAVA_HOME)/include/darwin"
endif

# Expand the wildcard to get all of the autogenerated sources
autogen_targets := $(wildcard $(ASN1_DIR)/*.c)

# Both OSX and Linux will build the so
ALL_LIBS=$(OUTPUT_DIR)/lib$(LIB_NAME).so
# OSX also needs to build the dylib
ifeq ($(UNAME_S),Darwin)
	ALL_LIBS+=$(OUTPUT_DIR)/lib$(LIB_NAME).dylib
endif

all: $(ALL_LIBS)

install: all
	install -m 644 $(ALL_LIBS) $(INSTALL_DIR)

clean:
	rm -f $(ALL_LIBS)

# Build the native header using the java class file
$(SOURCE_DIR)/$(NATIVE_FILENAME).h : $(CLASS_PATH)/gov/dot/its/jpo/sdcsdw/asn1/perxercodec/Native.class
	javah -classpath $(CLASS_PATH) -d $(SOURCE_DIR) gov.dot.its.jpo.sdcsdw.asn1.perxercodec.Native

# Build the shared object
$(OUTPUT_DIR)/lib$(LIB_NAME).so: $(SOURCE_DIR)/$(NATIVE_FILENAME).h $(SOURCE_DIR)/$(NATIVE_FILENAME).c $(autogen_targets)
	mkdir -p $(OUTPUT_DIR)
ifeq ($(UNAME_S),Darwin)
	./build-with-docker.sh
endif
ifeq ($(UNAME_S),Linux)
	@echo 'Building target: $@'
	@echo 'Invoking: GCC C Linker'
	gcc -shared -I"$(ASN1_DIR)" $(JNI_INCLUDE) $(CFLAGS) -fPIC -o $@ $^
	@echo 'Finished building target: $@'
	@echo ' '
endif

$(OUTPUT_DIR)/lib$(LIB_NAME).dylib: $(SOURCE_DIR)/$(NATIVE_FILENAME).h $(SOURCE_DIR)/$(NATIVE_FILENAME).c $(autogen_targets)
	mkdir -p $(OUTPUT_DIR)
ifeq ($(UNAME_S),Darwin)
	@echo 'Building target: $@'
	@echo 'Invoking: GCC C Linker'
	gcc -shared -I"$(ASN1_DIR)" $(JNI_INCLUDE) $(CFLAGS) -o $@ $^
	@echo 'Finished building target: $@'
	@echo ' '
endif
ifeq ($(UNAME_S),Linux)
	@echo 'Cannot build OSX dylib on Linux'
	exit -1
endif

